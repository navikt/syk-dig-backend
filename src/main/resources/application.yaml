server:
    port: 8080
    shutdown: graceful
    error:
        whitelabel:
            enabled: false

spring:
    main:
        banner-mode: 'off'
    profiles:
        active: default
    flyway:
        enabled: true
    datasource:
        url: "jdbc:postgresql://${DB_HOST}:${DB_PORT}/${DB_DATABASE}?reWriteBatchedInserts=true"
        username: ${DB_USERNAME}
        password: ${DB_PASSWORD}
        hikari:
            minimum-idle: 1
            maximum-pool-size: 5
    security:
        basic:
            enabled: false
        oauth2:
            resourceserver:
                jwt:
                    issuer-uri: ${AZURE_OPENID_CONFIG_ISSUER}
                    jwk-set-uri: ${AZURE_OPENID_CONFIG_JWKS_URI}
                    audiences: ${AZURE_APP_CLIENT_ID}
management:
    endpoint:
        prometheus.enabled: true
        health.probes.enabled: true
        health.show-details: always
    endpoints.web:
        base-path: /internal
        exposure.include: health,prometheus

oppgave:
    topic:
        name: "teamsykmelding.syk-dig-oppgave"

aiven-kafka:
    auto-offset-reset: earliest

istilgangskontroll.url: "http://istilgangskontroll.teamsykefravr"
saf.url: ${SAF_URL}
pdl.url: ${PDL_URL}
kodeverk.url: ${KODEVERK_URL}
dokarkiv.url: ${DOKARKIV_URL}
oppgave.url: ${OPPGAVE_URL}

no.nav.security.jwt:
    issuer:
        azureator:
            discoveryurl: ${AZURE_APP_WELL_KNOWN_URL}
            accepted_audience: ${AZURE_APP_CLIENT_ID}
    client:
        registration:
            onbehalfof-istilgangskontroll:
                token-endpoint-url: ${AZURE_OPENID_CONFIG_TOKEN_ENDPOINT}
                grant-type: urn:ietf:params:oauth:grant-type:jwt-bearer
                scope: api://${ISTILGANGSKONTROLL_AAD_CLIENT_ID}/.default
                authentication:
                    client-id: ${AZURE_APP_CLIENT_ID}
                    client-secret: ${AZURE_APP_CLIENT_SECRET}
                    client-auth-method: client_secret_basic
            onbehalfof-saf:
                token-endpoint-url: ${AZURE_OPENID_CONFIG_TOKEN_ENDPOINT}
                grant-type: urn:ietf:params:oauth:grant-type:jwt-bearer
                scope: api://${SAF_CLIENT_ID}/.default
                authentication:
                    client-id: ${AZURE_APP_CLIENT_ID}
                    client-secret: ${AZURE_APP_CLIENT_SECRET}
                    client-auth-method: client_secret_basic
            onbehalfof-pdl:
                token-endpoint-url: ${AZURE_OPENID_CONFIG_TOKEN_ENDPOINT}
                grant-type: urn:ietf:params:oauth:grant-type:jwt-bearer
                scope: api://${PDL_CLIENT_ID}/.default
                authentication:
                    client-id: ${AZURE_APP_CLIENT_ID}
                    client-secret: ${AZURE_APP_CLIENT_SECRET}
                    client-auth-method: client_secret_basic
            onbehalfof-dokarkiv:
                token-endpoint-url: ${AZURE_OPENID_CONFIG_TOKEN_ENDPOINT}
                grant-type: urn:ietf:params:oauth:grant-type:jwt-bearer
                scope: api://${DOKARKIV_CLIENT_ID}/.default
                authentication:
                    client-id: ${AZURE_APP_CLIENT_ID}
                    client-secret: ${AZURE_APP_CLIENT_SECRET}
                    client-auth-method: client_secret_basic
            onbehalfof-oppgave:
                token-endpoint-url: ${AZURE_OPENID_CONFIG_TOKEN_ENDPOINT}
                grant-type: urn:ietf:params:oauth:grant-type:jwt-bearer
                scope: api://${OPPGAVE_CLIENT_ID}/.default
                authentication:
                    client-id: ${AZURE_APP_CLIENT_ID}
                    client-secret: ${AZURE_APP_CLIENT_SECRET}
                    client-auth-method: client_secret_basic

logging.config: "classpath:logback.xml"

dgs:
    graphql:
        path: /api/graphql
